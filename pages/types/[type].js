import { useRouter } from 'next/router'
import { useState, useEffect, React } from 'react'
import Head from 'next/head'
import PropTypes from 'prop-types'
import axios from 'axios'
import PokemonItem from '@/components/PokeItem'
import Loading from '@/components/loading'
import Image from 'next/image'
import TypeInteractions from '@/components/TypeData'
import typeEffectiveness from '@/data/typesWS.json'
import styles from '@/styles/Button.module.css'

const TypePage = ({ pokemonDetails }) => {
  const router = useRouter()
  const { type } = router.query

  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (pokemonDetails) {
      setLoading(false)
    }
  }, [pokemonDetails])

  return (
    <>
      <Head>
        <title>{type}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      {loading
        ? (
          <Loading />
          )
        : (
          <main className='flex py-2 my-2 flex-col flex-wrap justify-center items-center content-center'>
            <header className='flex flex-wrap flex-row justify-between mx-2 items-center content-center lg:w-4/5 w-full text-center rounded-lg bg-yellow-200 py-2 px-5 border-t-4 border-b-4 border-yellow-400 pt-3 text-blue-700 '>
              <Image
                width={80}
                height={80}
                src={`/types/Pokemon_Type_Icon_${type}.svg`}
                alt={`Icone do tipo ${type}`}
                className={`${styles.typeIcon} lg:w-32 w-1/5`} />
              <h1 className='lg:text-5xl text-4xl font-semibold'>{type.charAt(0).toUpperCase() + type.slice(1)}</h1>
              <Image
                width={80}
                height={80}
                src={`/types/Pokemon_Type_Icon_${type}.svg`}
                alt={`Icone do tipo ${type}`}
                className={`${styles.typeIcon} lg:w-32 w-1/5`} />
            </header>
            {!loading && (
              <TypeInteractions type={type.toUpperCase()} typeData={typeEffectiveness} />
            )}
            <section className='py-2 my-2 flex-col flex-wrap'>
              <ul className='flex flex-wrap flex-row justify-center w-full p-2'>
                {pokemonDetails.map((pokemon) => (
                  <PokemonItem key={pokemon.name} {...pokemon} />
                ))}
              </ul>
            </section>
          </main>
          )}
    </>
  )
}

TypePage.propTypes = {
  pokemonDetails: PropTypes.arrayOf(PropTypes.object).isRequired
}

export async function getServerSideProps (context) {
  const { type } = context.params

  try {
    const response = await axios.get(`https://pokeapi.co/api/v2/type/${type}`)
    const pokemonList = response.data.pokemon

    const pokemonDetailsPromises = pokemonList.map(async (pokemon) => {
      const pokemonDetailsResponse = await axios.get(pokemon.pokemon.url)
      return {
        name: pokemon.pokemon.name,
        id: pokemonDetailsResponse.data.id,
        imageUrl: pokemonDetailsResponse.data.sprites.front_default || '/types/unknown.png',
        types: pokemonDetailsResponse.data.types.map((type) => type.type.name),
        isDefault: pokemonDetailsResponse.data.is_default,
        slot: pokemon.slot
      }
    })

    const pokemonDetails = await Promise.all(pokemonDetailsPromises)

    // Filtra apenas os PokÃ©mon com is_default igual a true
    const defaultPokemonDetails = pokemonDetails.filter((pokemon) => pokemon.isDefault)

    return {
      props: { pokemonDetails: defaultPokemonDetails }
    }
  } catch (error) {
    console.error('Error fetching Pokemon data:', error)
    return {
      notFound: true
    }
  }
}

export default TypePage
